

# This file was autogenerated by some hot garbage in the `uniffi` crate.
# Trust me, you don't want to mess with it!

# Common helper code.
#
# Ideally this would live in a separate .py file where it can be unittested etc
# in isolation, and perhaps even published as a re-useable package.
#
# However, it's important that the details of how this helper code works (e.g. the
# way that different builtin types are passed across the FFI) exactly match what's
# expected by the rust code on the other side of the interface. In practice right
# now that means coming from the exact some version of `uniffi` that was used to
# compile the rust component. The easiest way to ensure this is to bundle the Python
# helpers directly inline like we're doing here.

from __future__ import annotations
import os
import sys
import ctypes
import enum
import struct
import contextlib
import datetime
import threading
import itertools
import traceback
import typing
import platform

# Used for default argument values
_DEFAULT = object() # type: typing.Any


class _UniffiRustBuffer(ctypes.Structure):
    _fields_ = [
        ("capacity", ctypes.c_uint64),
        ("len", ctypes.c_uint64),
        ("data", ctypes.POINTER(ctypes.c_char)),
    ]

    @staticmethod
    def default():
        return _UniffiRustBuffer(0, 0, None)

    @staticmethod
    def alloc(size):
        return _uniffi_rust_call(_UniffiLib.ffi_romer_rustbuffer_alloc, size)

    @staticmethod
    def reserve(rbuf, additional):
        return _uniffi_rust_call(_UniffiLib.ffi_romer_rustbuffer_reserve, rbuf, additional)

    def free(self):
        return _uniffi_rust_call(_UniffiLib.ffi_romer_rustbuffer_free, self)

    def __str__(self):
        return "_UniffiRustBuffer(capacity={}, len={}, data={})".format(
            self.capacity,
            self.len,
            self.data[0:self.len]
        )

    @contextlib.contextmanager
    def alloc_with_builder(*args):
        """Context-manger to allocate a buffer using a _UniffiRustBufferBuilder.

        The allocated buffer will be automatically freed if an error occurs, ensuring that
        we don't accidentally leak it.
        """
        builder = _UniffiRustBufferBuilder()
        try:
            yield builder
        except:
            builder.discard()
            raise

    @contextlib.contextmanager
    def consume_with_stream(self):
        """Context-manager to consume a buffer using a _UniffiRustBufferStream.

        The _UniffiRustBuffer will be freed once the context-manager exits, ensuring that we don't
        leak it even if an error occurs.
        """
        try:
            s = _UniffiRustBufferStream.from_rust_buffer(self)
            yield s
            if s.remaining() != 0:
                raise RuntimeError("junk data left in buffer at end of consume_with_stream")
        finally:
            self.free()

    @contextlib.contextmanager
    def read_with_stream(self):
        """Context-manager to read a buffer using a _UniffiRustBufferStream.

        This is like consume_with_stream, but doesn't free the buffer afterwards.
        It should only be used with borrowed `_UniffiRustBuffer` data.
        """
        s = _UniffiRustBufferStream.from_rust_buffer(self)
        yield s
        if s.remaining() != 0:
            raise RuntimeError("junk data left in buffer at end of read_with_stream")

class _UniffiForeignBytes(ctypes.Structure):
    _fields_ = [
        ("len", ctypes.c_int32),
        ("data", ctypes.POINTER(ctypes.c_char)),
    ]

    def __str__(self):
        return "_UniffiForeignBytes(len={}, data={})".format(self.len, self.data[0:self.len])


class _UniffiRustBufferStream:
    """
    Helper for structured reading of bytes from a _UniffiRustBuffer
    """

    def __init__(self, data, len):
        self.data = data
        self.len = len
        self.offset = 0

    @classmethod
    def from_rust_buffer(cls, buf):
        return cls(buf.data, buf.len)

    def remaining(self):
        return self.len - self.offset

    def _unpack_from(self, size, format):
        if self.offset + size > self.len:
            raise InternalError("read past end of rust buffer")
        value = struct.unpack(format, self.data[self.offset:self.offset+size])[0]
        self.offset += size
        return value

    def read(self, size):
        if self.offset + size > self.len:
            raise InternalError("read past end of rust buffer")
        data = self.data[self.offset:self.offset+size]
        self.offset += size
        return data

    def read_i8(self):
        return self._unpack_from(1, ">b")

    def read_u8(self):
        return self._unpack_from(1, ">B")

    def read_i16(self):
        return self._unpack_from(2, ">h")

    def read_u16(self):
        return self._unpack_from(2, ">H")

    def read_i32(self):
        return self._unpack_from(4, ">i")

    def read_u32(self):
        return self._unpack_from(4, ">I")

    def read_i64(self):
        return self._unpack_from(8, ">q")

    def read_u64(self):
        return self._unpack_from(8, ">Q")

    def read_float(self):
        v = self._unpack_from(4, ">f")
        return v

    def read_double(self):
        return self._unpack_from(8, ">d")

class _UniffiRustBufferBuilder:
    """
    Helper for structured writing of bytes into a _UniffiRustBuffer.
    """

    def __init__(self):
        self.rbuf = _UniffiRustBuffer.alloc(16)
        self.rbuf.len = 0

    def finalize(self):
        rbuf = self.rbuf
        self.rbuf = None
        return rbuf

    def discard(self):
        if self.rbuf is not None:
            rbuf = self.finalize()
            rbuf.free()

    @contextlib.contextmanager
    def _reserve(self, num_bytes):
        if self.rbuf.len + num_bytes > self.rbuf.capacity:
            self.rbuf = _UniffiRustBuffer.reserve(self.rbuf, num_bytes)
        yield None
        self.rbuf.len += num_bytes

    def _pack_into(self, size, format, value):
        with self._reserve(size):
            # XXX TODO: I feel like I should be able to use `struct.pack_into` here but can't figure it out.
            for i, byte in enumerate(struct.pack(format, value)):
                self.rbuf.data[self.rbuf.len + i] = byte

    def write(self, value):
        with self._reserve(len(value)):
            for i, byte in enumerate(value):
                self.rbuf.data[self.rbuf.len + i] = byte

    def write_i8(self, v):
        self._pack_into(1, ">b", v)

    def write_u8(self, v):
        self._pack_into(1, ">B", v)

    def write_i16(self, v):
        self._pack_into(2, ">h", v)

    def write_u16(self, v):
        self._pack_into(2, ">H", v)

    def write_i32(self, v):
        self._pack_into(4, ">i", v)

    def write_u32(self, v):
        self._pack_into(4, ">I", v)

    def write_i64(self, v):
        self._pack_into(8, ">q", v)

    def write_u64(self, v):
        self._pack_into(8, ">Q", v)

    def write_float(self, v):
        self._pack_into(4, ">f", v)

    def write_double(self, v):
        self._pack_into(8, ">d", v)

    def write_c_size_t(self, v):
        self._pack_into(ctypes.sizeof(ctypes.c_size_t) , "@N", v)
# A handful of classes and functions to support the generated data structures.
# This would be a good candidate for isolating in its own ffi-support lib.

class InternalError(Exception):
    pass

class _UniffiRustCallStatus(ctypes.Structure):
    """
    Error runtime.
    """
    _fields_ = [
        ("code", ctypes.c_int8),
        ("error_buf", _UniffiRustBuffer),
    ]

    # These match the values from the uniffi::rustcalls module
    CALL_SUCCESS = 0
    CALL_ERROR = 1
    CALL_UNEXPECTED_ERROR = 2

    @staticmethod
    def default():
        return _UniffiRustCallStatus(code=_UniffiRustCallStatus.CALL_SUCCESS, error_buf=_UniffiRustBuffer.default())

    def __str__(self):
        if self.code == _UniffiRustCallStatus.CALL_SUCCESS:
            return "_UniffiRustCallStatus(CALL_SUCCESS)"
        elif self.code == _UniffiRustCallStatus.CALL_ERROR:
            return "_UniffiRustCallStatus(CALL_ERROR)"
        elif self.code == _UniffiRustCallStatus.CALL_UNEXPECTED_ERROR:
            return "_UniffiRustCallStatus(CALL_UNEXPECTED_ERROR)"
        else:
            return "_UniffiRustCallStatus(<invalid code>)"

def _uniffi_rust_call(fn, *args):
    # Call a rust function
    return _uniffi_rust_call_with_error(None, fn, *args)

def _uniffi_rust_call_with_error(error_ffi_converter, fn, *args):
    # Call a rust function and handle any errors
    #
    # This function is used for rust calls that return Result<> and therefore can set the CALL_ERROR status code.
    # error_ffi_converter must be set to the _UniffiConverter for the error class that corresponds to the result.
    call_status = _UniffiRustCallStatus.default()

    args_with_error = args + (ctypes.byref(call_status),)
    result = fn(*args_with_error)
    _uniffi_check_call_status(error_ffi_converter, call_status)
    return result

def _uniffi_check_call_status(error_ffi_converter, call_status):
    if call_status.code == _UniffiRustCallStatus.CALL_SUCCESS:
        pass
    elif call_status.code == _UniffiRustCallStatus.CALL_ERROR:
        if error_ffi_converter is None:
            call_status.error_buf.free()
            raise InternalError("_uniffi_rust_call_with_error: CALL_ERROR, but error_ffi_converter is None")
        else:
            raise error_ffi_converter.lift(call_status.error_buf)
    elif call_status.code == _UniffiRustCallStatus.CALL_UNEXPECTED_ERROR:
        # When the rust code sees a panic, it tries to construct a _UniffiRustBuffer
        # with the message.  But if that code panics, then it just sends back
        # an empty buffer.
        if call_status.error_buf.len > 0:
            msg = _UniffiConverterString.lift(call_status.error_buf)
        else:
            msg = "Unknown rust panic"
        raise InternalError(msg)
    else:
        raise InternalError("Invalid _UniffiRustCallStatus code: {}".format(
            call_status.code))

def _uniffi_trait_interface_call(call_status, make_call, write_return_value):
    try:
        return write_return_value(make_call())
    except Exception as e:
        call_status.code = _UniffiRustCallStatus.CALL_UNEXPECTED_ERROR
        call_status.error_buf = _UniffiConverterString.lower(repr(e))

def _uniffi_trait_interface_call_with_error(call_status, make_call, write_return_value, error_type, lower_error):
    try:
        try:
            return write_return_value(make_call())
        except error_type as e:
            call_status.code = _UniffiRustCallStatus.CALL_ERROR
            call_status.error_buf = lower_error(e)
    except Exception as e:
        call_status.code = _UniffiRustCallStatus.CALL_UNEXPECTED_ERROR
        call_status.error_buf = _UniffiConverterString.lower(repr(e))
class _UniffiHandleMap:
    """
    A map where inserting, getting and removing data is synchronized with a lock.
    """

    def __init__(self):
        # type Handle = int
        self._map = {}  # type: Dict[Handle, Any]
        self._lock = threading.Lock()
        self._counter = itertools.count()

    def insert(self, obj):
        with self._lock:
            handle = next(self._counter)
            self._map[handle] = obj
            return handle

    def get(self, handle):
        try:
            with self._lock:
                return self._map[handle]
        except KeyError:
            raise InternalError("_UniffiHandleMap.get: Invalid handle")

    def remove(self, handle):
        try:
            with self._lock:
                return self._map.pop(handle)
        except KeyError:
            raise InternalError("_UniffiHandleMap.remove: Invalid handle")

    def __len__(self):
        return len(self._map)
# Types conforming to `_UniffiConverterPrimitive` pass themselves directly over the FFI.
class _UniffiConverterPrimitive:
    @classmethod
    def lift(cls, value):
        return value

    @classmethod
    def lower(cls, value):
        return value

class _UniffiConverterPrimitiveInt(_UniffiConverterPrimitive):
    @classmethod
    def check_lower(cls, value):
        try:
            value = value.__index__()
        except Exception:
            raise TypeError("'{}' object cannot be interpreted as an integer".format(type(value).__name__))
        if not isinstance(value, int):
            raise TypeError("__index__ returned non-int (type {})".format(type(value).__name__))
        if not cls.VALUE_MIN <= value < cls.VALUE_MAX:
            raise ValueError("{} requires {} <= value < {}".format(cls.CLASS_NAME, cls.VALUE_MIN, cls.VALUE_MAX))

class _UniffiConverterPrimitiveFloat(_UniffiConverterPrimitive):
    @classmethod
    def check_lower(cls, value):
        try:
            value = value.__float__()
        except Exception:
            raise TypeError("must be real number, not {}".format(type(value).__name__))
        if not isinstance(value, float):
            raise TypeError("__float__ returned non-float (type {})".format(type(value).__name__))

# Helper class for wrapper types that will always go through a _UniffiRustBuffer.
# Classes should inherit from this and implement the `read` and `write` static methods.
class _UniffiConverterRustBuffer:
    @classmethod
    def lift(cls, rbuf):
        with rbuf.consume_with_stream() as stream:
            return cls.read(stream)

    @classmethod
    def lower(cls, value):
        with _UniffiRustBuffer.alloc_with_builder() as builder:
            cls.write(value, builder)
            return builder.finalize()

# Contains loading, initialization code, and the FFI Function declarations.
# Define some ctypes FFI types that we use in the library

"""
Function pointer for a Rust task, which a callback function that takes a opaque pointer
"""
_UNIFFI_RUST_TASK = ctypes.CFUNCTYPE(None, ctypes.c_void_p, ctypes.c_int8)

def _uniffi_future_callback_t(return_type):
    """
    Factory function to create callback function types for async functions
    """
    return ctypes.CFUNCTYPE(None, ctypes.c_uint64, return_type, _UniffiRustCallStatus)

def _uniffi_load_indirect():
    """
    This is how we find and load the dynamic library provided by the component.
    For now we just look it up by name.
    """
    if sys.platform == "darwin":
        libname = "lib{}.dylib"
    elif sys.platform.startswith("win"):
        # As of python3.8, ctypes does not seem to search $PATH when loading DLLs.
        # We could use `os.add_dll_directory` to configure the search path, but
        # it doesn't feel right to mess with application-wide settings. Let's
        # assume that the `.dll` is next to the `.py` file and load by full path.
        libname = os.path.join(
            os.path.dirname(__file__),
            "{}.dll",
        )
    else:
        # Anything else must be an ELF platform - Linux, *BSD, Solaris/illumos
        libname = "lib{}.so"

    libname = libname.format("romer")
    path = os.path.join(os.path.dirname(__file__), libname)
    lib = ctypes.cdll.LoadLibrary(path)
    return lib

def _uniffi_check_contract_api_version(lib):
    # Get the bindings contract version from our ComponentInterface
    bindings_contract_version = 26
    # Get the scaffolding contract version by calling the into the dylib
    scaffolding_contract_version = lib.ffi_romer_uniffi_contract_version()
    if bindings_contract_version != scaffolding_contract_version:
        raise InternalError("UniFFI contract version mismatch: try cleaning and rebuilding your project")

def _uniffi_check_api_checksums(lib):
    if lib.uniffi_romer_checksum_method_romer_balance() != 27141:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_romer_checksum_method_romer_invoice_paid() != 14739:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_romer_checksum_method_romer_list_payments() != 15280:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_romer_checksum_method_romer_receive() != 47050:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_romer_checksum_method_romer_send() != 20994:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_romer_checksum_method_romer_send_onchain() != 62598:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_romer_checksum_method_romer_status() != 30640:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_romer_checksum_constructor_romer_new() != 43794:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")

# A ctypes library to expose the extern-C FFI definitions.
# This is an implementation detail which will be called internally by the public API.

_UniffiLib = _uniffi_load_indirect()
_UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK = ctypes.CFUNCTYPE(None,ctypes.c_uint64,ctypes.c_int8,
)
_UNIFFI_FOREIGN_FUTURE_FREE = ctypes.CFUNCTYPE(None,ctypes.c_uint64,
)
_UNIFFI_CALLBACK_INTERFACE_FREE = ctypes.CFUNCTYPE(None,ctypes.c_uint64,
)
class _UniffiForeignFuture(ctypes.Structure):
    _fields_ = [
        ("handle", ctypes.c_uint64),
        ("free", _UNIFFI_FOREIGN_FUTURE_FREE),
    ]
class _UniffiForeignFutureStructU8(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_uint8),
        ("call_status", _UniffiRustCallStatus),
    ]
_UNIFFI_FOREIGN_FUTURE_COMPLETE_U8 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiForeignFutureStructU8,
)
class _UniffiForeignFutureStructI8(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_int8),
        ("call_status", _UniffiRustCallStatus),
    ]
_UNIFFI_FOREIGN_FUTURE_COMPLETE_I8 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiForeignFutureStructI8,
)
class _UniffiForeignFutureStructU16(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_uint16),
        ("call_status", _UniffiRustCallStatus),
    ]
_UNIFFI_FOREIGN_FUTURE_COMPLETE_U16 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiForeignFutureStructU16,
)
class _UniffiForeignFutureStructI16(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_int16),
        ("call_status", _UniffiRustCallStatus),
    ]
_UNIFFI_FOREIGN_FUTURE_COMPLETE_I16 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiForeignFutureStructI16,
)
class _UniffiForeignFutureStructU32(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_uint32),
        ("call_status", _UniffiRustCallStatus),
    ]
_UNIFFI_FOREIGN_FUTURE_COMPLETE_U32 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiForeignFutureStructU32,
)
class _UniffiForeignFutureStructI32(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_int32),
        ("call_status", _UniffiRustCallStatus),
    ]
_UNIFFI_FOREIGN_FUTURE_COMPLETE_I32 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiForeignFutureStructI32,
)
class _UniffiForeignFutureStructU64(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_uint64),
        ("call_status", _UniffiRustCallStatus),
    ]
_UNIFFI_FOREIGN_FUTURE_COMPLETE_U64 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiForeignFutureStructU64,
)
class _UniffiForeignFutureStructI64(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_int64),
        ("call_status", _UniffiRustCallStatus),
    ]
_UNIFFI_FOREIGN_FUTURE_COMPLETE_I64 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiForeignFutureStructI64,
)
class _UniffiForeignFutureStructF32(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_float),
        ("call_status", _UniffiRustCallStatus),
    ]
_UNIFFI_FOREIGN_FUTURE_COMPLETE_F32 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiForeignFutureStructF32,
)
class _UniffiForeignFutureStructF64(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_double),
        ("call_status", _UniffiRustCallStatus),
    ]
_UNIFFI_FOREIGN_FUTURE_COMPLETE_F64 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiForeignFutureStructF64,
)
class _UniffiForeignFutureStructPointer(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_void_p),
        ("call_status", _UniffiRustCallStatus),
    ]
_UNIFFI_FOREIGN_FUTURE_COMPLETE_POINTER = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiForeignFutureStructPointer,
)
class _UniffiForeignFutureStructRustBuffer(ctypes.Structure):
    _fields_ = [
        ("return_value", _UniffiRustBuffer),
        ("call_status", _UniffiRustCallStatus),
    ]
_UNIFFI_FOREIGN_FUTURE_COMPLETE_RUST_BUFFER = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiForeignFutureStructRustBuffer,
)
class _UniffiForeignFutureStructVoid(ctypes.Structure):
    _fields_ = [
        ("call_status", _UniffiRustCallStatus),
    ]
_UNIFFI_FOREIGN_FUTURE_COMPLETE_VOID = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiForeignFutureStructVoid,
)
_UniffiLib.uniffi_romer_fn_clone_romer.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_romer_fn_clone_romer.restype = ctypes.c_void_p
_UniffiLib.uniffi_romer_fn_free_romer.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_romer_fn_free_romer.restype = None
_UniffiLib.uniffi_romer_fn_constructor_romer_new.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_romer_fn_constructor_romer_new.restype = ctypes.c_void_p
_UniffiLib.uniffi_romer_fn_method_romer_balance.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_romer_fn_method_romer_balance.restype = _UniffiRustBuffer
_UniffiLib.uniffi_romer_fn_method_romer_invoice_paid.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_romer_fn_method_romer_invoice_paid.restype = ctypes.c_int8
_UniffiLib.uniffi_romer_fn_method_romer_list_payments.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_romer_fn_method_romer_list_payments.restype = _UniffiRustBuffer
_UniffiLib.uniffi_romer_fn_method_romer_receive.argtypes = (
    ctypes.c_void_p,
    ctypes.c_uint64,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_romer_fn_method_romer_receive.restype = _UniffiRustBuffer
_UniffiLib.uniffi_romer_fn_method_romer_send.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_romer_fn_method_romer_send.restype = ctypes.c_uint64
_UniffiLib.uniffi_romer_fn_method_romer_send_onchain.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_romer_fn_method_romer_send_onchain.restype = _UniffiRustBuffer
_UniffiLib.uniffi_romer_fn_method_romer_status.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_romer_fn_method_romer_status.restype = _UniffiRustBuffer
_UniffiLib.ffi_romer_rustbuffer_alloc.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_romer_rustbuffer_alloc.restype = _UniffiRustBuffer
_UniffiLib.ffi_romer_rustbuffer_from_bytes.argtypes = (
    _UniffiForeignBytes,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_romer_rustbuffer_from_bytes.restype = _UniffiRustBuffer
_UniffiLib.ffi_romer_rustbuffer_free.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_romer_rustbuffer_free.restype = None
_UniffiLib.ffi_romer_rustbuffer_reserve.argtypes = (
    _UniffiRustBuffer,
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_romer_rustbuffer_reserve.restype = _UniffiRustBuffer
_UniffiLib.ffi_romer_rust_future_poll_u8.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_romer_rust_future_poll_u8.restype = None
_UniffiLib.ffi_romer_rust_future_cancel_u8.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_romer_rust_future_cancel_u8.restype = None
_UniffiLib.ffi_romer_rust_future_free_u8.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_romer_rust_future_free_u8.restype = None
_UniffiLib.ffi_romer_rust_future_complete_u8.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_romer_rust_future_complete_u8.restype = ctypes.c_uint8
_UniffiLib.ffi_romer_rust_future_poll_i8.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_romer_rust_future_poll_i8.restype = None
_UniffiLib.ffi_romer_rust_future_cancel_i8.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_romer_rust_future_cancel_i8.restype = None
_UniffiLib.ffi_romer_rust_future_free_i8.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_romer_rust_future_free_i8.restype = None
_UniffiLib.ffi_romer_rust_future_complete_i8.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_romer_rust_future_complete_i8.restype = ctypes.c_int8
_UniffiLib.ffi_romer_rust_future_poll_u16.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_romer_rust_future_poll_u16.restype = None
_UniffiLib.ffi_romer_rust_future_cancel_u16.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_romer_rust_future_cancel_u16.restype = None
_UniffiLib.ffi_romer_rust_future_free_u16.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_romer_rust_future_free_u16.restype = None
_UniffiLib.ffi_romer_rust_future_complete_u16.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_romer_rust_future_complete_u16.restype = ctypes.c_uint16
_UniffiLib.ffi_romer_rust_future_poll_i16.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_romer_rust_future_poll_i16.restype = None
_UniffiLib.ffi_romer_rust_future_cancel_i16.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_romer_rust_future_cancel_i16.restype = None
_UniffiLib.ffi_romer_rust_future_free_i16.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_romer_rust_future_free_i16.restype = None
_UniffiLib.ffi_romer_rust_future_complete_i16.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_romer_rust_future_complete_i16.restype = ctypes.c_int16
_UniffiLib.ffi_romer_rust_future_poll_u32.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_romer_rust_future_poll_u32.restype = None
_UniffiLib.ffi_romer_rust_future_cancel_u32.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_romer_rust_future_cancel_u32.restype = None
_UniffiLib.ffi_romer_rust_future_free_u32.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_romer_rust_future_free_u32.restype = None
_UniffiLib.ffi_romer_rust_future_complete_u32.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_romer_rust_future_complete_u32.restype = ctypes.c_uint32
_UniffiLib.ffi_romer_rust_future_poll_i32.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_romer_rust_future_poll_i32.restype = None
_UniffiLib.ffi_romer_rust_future_cancel_i32.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_romer_rust_future_cancel_i32.restype = None
_UniffiLib.ffi_romer_rust_future_free_i32.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_romer_rust_future_free_i32.restype = None
_UniffiLib.ffi_romer_rust_future_complete_i32.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_romer_rust_future_complete_i32.restype = ctypes.c_int32
_UniffiLib.ffi_romer_rust_future_poll_u64.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_romer_rust_future_poll_u64.restype = None
_UniffiLib.ffi_romer_rust_future_cancel_u64.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_romer_rust_future_cancel_u64.restype = None
_UniffiLib.ffi_romer_rust_future_free_u64.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_romer_rust_future_free_u64.restype = None
_UniffiLib.ffi_romer_rust_future_complete_u64.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_romer_rust_future_complete_u64.restype = ctypes.c_uint64
_UniffiLib.ffi_romer_rust_future_poll_i64.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_romer_rust_future_poll_i64.restype = None
_UniffiLib.ffi_romer_rust_future_cancel_i64.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_romer_rust_future_cancel_i64.restype = None
_UniffiLib.ffi_romer_rust_future_free_i64.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_romer_rust_future_free_i64.restype = None
_UniffiLib.ffi_romer_rust_future_complete_i64.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_romer_rust_future_complete_i64.restype = ctypes.c_int64
_UniffiLib.ffi_romer_rust_future_poll_f32.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_romer_rust_future_poll_f32.restype = None
_UniffiLib.ffi_romer_rust_future_cancel_f32.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_romer_rust_future_cancel_f32.restype = None
_UniffiLib.ffi_romer_rust_future_free_f32.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_romer_rust_future_free_f32.restype = None
_UniffiLib.ffi_romer_rust_future_complete_f32.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_romer_rust_future_complete_f32.restype = ctypes.c_float
_UniffiLib.ffi_romer_rust_future_poll_f64.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_romer_rust_future_poll_f64.restype = None
_UniffiLib.ffi_romer_rust_future_cancel_f64.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_romer_rust_future_cancel_f64.restype = None
_UniffiLib.ffi_romer_rust_future_free_f64.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_romer_rust_future_free_f64.restype = None
_UniffiLib.ffi_romer_rust_future_complete_f64.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_romer_rust_future_complete_f64.restype = ctypes.c_double
_UniffiLib.ffi_romer_rust_future_poll_pointer.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_romer_rust_future_poll_pointer.restype = None
_UniffiLib.ffi_romer_rust_future_cancel_pointer.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_romer_rust_future_cancel_pointer.restype = None
_UniffiLib.ffi_romer_rust_future_free_pointer.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_romer_rust_future_free_pointer.restype = None
_UniffiLib.ffi_romer_rust_future_complete_pointer.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_romer_rust_future_complete_pointer.restype = ctypes.c_void_p
_UniffiLib.ffi_romer_rust_future_poll_rust_buffer.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_romer_rust_future_poll_rust_buffer.restype = None
_UniffiLib.ffi_romer_rust_future_cancel_rust_buffer.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_romer_rust_future_cancel_rust_buffer.restype = None
_UniffiLib.ffi_romer_rust_future_free_rust_buffer.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_romer_rust_future_free_rust_buffer.restype = None
_UniffiLib.ffi_romer_rust_future_complete_rust_buffer.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_romer_rust_future_complete_rust_buffer.restype = _UniffiRustBuffer
_UniffiLib.ffi_romer_rust_future_poll_void.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_romer_rust_future_poll_void.restype = None
_UniffiLib.ffi_romer_rust_future_cancel_void.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_romer_rust_future_cancel_void.restype = None
_UniffiLib.ffi_romer_rust_future_free_void.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_romer_rust_future_free_void.restype = None
_UniffiLib.ffi_romer_rust_future_complete_void.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_romer_rust_future_complete_void.restype = None
_UniffiLib.uniffi_romer_checksum_method_romer_balance.argtypes = (
)
_UniffiLib.uniffi_romer_checksum_method_romer_balance.restype = ctypes.c_uint16
_UniffiLib.uniffi_romer_checksum_method_romer_invoice_paid.argtypes = (
)
_UniffiLib.uniffi_romer_checksum_method_romer_invoice_paid.restype = ctypes.c_uint16
_UniffiLib.uniffi_romer_checksum_method_romer_list_payments.argtypes = (
)
_UniffiLib.uniffi_romer_checksum_method_romer_list_payments.restype = ctypes.c_uint16
_UniffiLib.uniffi_romer_checksum_method_romer_receive.argtypes = (
)
_UniffiLib.uniffi_romer_checksum_method_romer_receive.restype = ctypes.c_uint16
_UniffiLib.uniffi_romer_checksum_method_romer_send.argtypes = (
)
_UniffiLib.uniffi_romer_checksum_method_romer_send.restype = ctypes.c_uint16
_UniffiLib.uniffi_romer_checksum_method_romer_send_onchain.argtypes = (
)
_UniffiLib.uniffi_romer_checksum_method_romer_send_onchain.restype = ctypes.c_uint16
_UniffiLib.uniffi_romer_checksum_method_romer_status.argtypes = (
)
_UniffiLib.uniffi_romer_checksum_method_romer_status.restype = ctypes.c_uint16
_UniffiLib.uniffi_romer_checksum_constructor_romer_new.argtypes = (
)
_UniffiLib.uniffi_romer_checksum_constructor_romer_new.restype = ctypes.c_uint16
_UniffiLib.ffi_romer_uniffi_contract_version.argtypes = (
)
_UniffiLib.ffi_romer_uniffi_contract_version.restype = ctypes.c_uint32

_uniffi_check_contract_api_version(_UniffiLib)
_uniffi_check_api_checksums(_UniffiLib)

# Public interface members begin here.


class _UniffiConverterUInt32(_UniffiConverterPrimitiveInt):
    CLASS_NAME = "u32"
    VALUE_MIN = 0
    VALUE_MAX = 2**32

    @staticmethod
    def read(buf):
        return buf.read_u32()

    @staticmethod
    def write(value, buf):
        buf.write_u32(value)

class _UniffiConverterUInt64(_UniffiConverterPrimitiveInt):
    CLASS_NAME = "u64"
    VALUE_MIN = 0
    VALUE_MAX = 2**64

    @staticmethod
    def read(buf):
        return buf.read_u64()

    @staticmethod
    def write(value, buf):
        buf.write_u64(value)

class _UniffiConverterBool:
    @classmethod
    def check_lower(cls, value):
        return not not value

    @classmethod
    def lower(cls, value):
        return 1 if value else 0

    @staticmethod
    def lift(value):
        return value != 0

    @classmethod
    def read(cls, buf):
        return cls.lift(buf.read_u8())

    @classmethod
    def write(cls, value, buf):
        buf.write_u8(value)

class _UniffiConverterString:
    @staticmethod
    def check_lower(value):
        if not isinstance(value, str):
            raise TypeError("argument must be str, not {}".format(type(value).__name__))
        return value

    @staticmethod
    def read(buf):
        size = buf.read_i32()
        if size < 0:
            raise InternalError("Unexpected negative string length")
        utf8_bytes = buf.read(size)
        return utf8_bytes.decode("utf-8")

    @staticmethod
    def write(value, buf):
        utf8_bytes = value.encode("utf-8")
        buf.write_i32(len(utf8_bytes))
        buf.write(utf8_bytes)

    @staticmethod
    def lift(buf):
        with buf.consume_with_stream() as stream:
            return stream.read(stream.remaining()).decode("utf-8")

    @staticmethod
    def lower(value):
        with _UniffiRustBuffer.alloc_with_builder() as builder:
            builder.write(value.encode("utf-8"))
            return builder.finalize()



class RomerProtocol(typing.Protocol):
    def balance(self, ):
        raise NotImplementedError
    def invoice_paid(self, invoice: "Bolt11Invoice"):
        raise NotImplementedError
    def list_payments(self, ):
        raise NotImplementedError
    def receive(self, amount_sat: "int",description: "str"):
        raise NotImplementedError
    def send(self, invoice: "str"):
        raise NotImplementedError
    def send_onchain(self, address: "str",amount_sat: "int"):
        raise NotImplementedError
    def status(self, ):
        raise NotImplementedError


class Romer:
    _pointer: ctypes.c_void_p
    def __init__(self, api_token: "str"):
        _UniffiConverterString.check_lower(api_token)
        
        self._pointer = _uniffi_rust_call_with_error(_UniffiConverterTypeRomerError,_UniffiLib.uniffi_romer_fn_constructor_romer_new,
        _UniffiConverterString.lower(api_token))

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _uniffi_rust_call(_UniffiLib.uniffi_romer_fn_free_romer, pointer)

    def _uniffi_clone_pointer(self):
        return _uniffi_rust_call(_UniffiLib.uniffi_romer_fn_clone_romer, self._pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def balance(self, ) -> "Balances":
        return _UniffiConverterTypeBalances.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_romer_fn_method_romer_balance,self._uniffi_clone_pointer(),)
        )





    def invoice_paid(self, invoice: "Bolt11Invoice") -> "bool":
        _UniffiConverterTypeBolt11Invoice.check_lower(invoice)
        
        return _UniffiConverterBool.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_romer_fn_method_romer_invoice_paid,self._uniffi_clone_pointer(),
        _UniffiConverterTypeBolt11Invoice.lower(invoice))
        )





    def list_payments(self, ) -> "typing.List[PaymentDetails]":
        return _UniffiConverterSequenceTypePaymentDetails.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_romer_fn_method_romer_list_payments,self._uniffi_clone_pointer(),)
        )





    def receive(self, amount_sat: "int",description: "str") -> "Bolt11Invoice":
        _UniffiConverterUInt64.check_lower(amount_sat)
        
        _UniffiConverterString.check_lower(description)
        
        return _UniffiConverterTypeBolt11Invoice.lift(
            _uniffi_rust_call_with_error(_UniffiConverterTypeRomerError,_UniffiLib.uniffi_romer_fn_method_romer_receive,self._uniffi_clone_pointer(),
        _UniffiConverterUInt64.lower(amount_sat),
        _UniffiConverterString.lower(description))
        )





    def send(self, invoice: "str") -> "int":
        _UniffiConverterString.check_lower(invoice)
        
        return _UniffiConverterUInt64.lift(
            _uniffi_rust_call_with_error(_UniffiConverterTypeRomerError,_UniffiLib.uniffi_romer_fn_method_romer_send,self._uniffi_clone_pointer(),
        _UniffiConverterString.lower(invoice))
        )





    def send_onchain(self, address: "str",amount_sat: "int") -> "Txid":
        _UniffiConverterString.check_lower(address)
        
        _UniffiConverterUInt64.check_lower(amount_sat)
        
        return _UniffiConverterTypeTxid.lift(
            _uniffi_rust_call_with_error(_UniffiConverterTypeRomerError,_UniffiLib.uniffi_romer_fn_method_romer_send_onchain,self._uniffi_clone_pointer(),
        _UniffiConverterString.lower(address),
        _UniffiConverterUInt64.lower(amount_sat))
        )





    def status(self, ) -> "Status":
        return _UniffiConverterTypeStatus.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_romer_fn_method_romer_status,self._uniffi_clone_pointer(),)
        )






class _UniffiConverterTypeRomer:

    @staticmethod
    def lift(value: int):
        return Romer._make_instance_(value)

    @staticmethod
    def check_lower(value: Romer):
        if not isinstance(value, Romer):
            raise TypeError("Expected Romer instance, {} found".format(type(value).__name__))

    @staticmethod
    def lower(value: RomerProtocol):
        if not isinstance(value, Romer):
            raise TypeError("Expected Romer instance, {} found".format(type(value).__name__))
        return value._uniffi_clone_pointer()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: RomerProtocol, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))


class Balances:
    total_onchain_balance_sats: "int"
    spendable_onchain_balance_sats: "int"
    total_anchor_channels_reserve_sats: "int"
    total_lightning_balance_sats: "int"
    outbound_capacity_lightning_sats: "int"
    inbound_capacity_lightning_sats: "int"
    def __init__(self, *, total_onchain_balance_sats: "int", spendable_onchain_balance_sats: "int", total_anchor_channels_reserve_sats: "int", total_lightning_balance_sats: "int", outbound_capacity_lightning_sats: "int", inbound_capacity_lightning_sats: "int"):
        self.total_onchain_balance_sats = total_onchain_balance_sats
        self.spendable_onchain_balance_sats = spendable_onchain_balance_sats
        self.total_anchor_channels_reserve_sats = total_anchor_channels_reserve_sats
        self.total_lightning_balance_sats = total_lightning_balance_sats
        self.outbound_capacity_lightning_sats = outbound_capacity_lightning_sats
        self.inbound_capacity_lightning_sats = inbound_capacity_lightning_sats

    def __str__(self):
        return "Balances(total_onchain_balance_sats={}, spendable_onchain_balance_sats={}, total_anchor_channels_reserve_sats={}, total_lightning_balance_sats={}, outbound_capacity_lightning_sats={}, inbound_capacity_lightning_sats={})".format(self.total_onchain_balance_sats, self.spendable_onchain_balance_sats, self.total_anchor_channels_reserve_sats, self.total_lightning_balance_sats, self.outbound_capacity_lightning_sats, self.inbound_capacity_lightning_sats)

    def __eq__(self, other):
        if self.total_onchain_balance_sats != other.total_onchain_balance_sats:
            return False
        if self.spendable_onchain_balance_sats != other.spendable_onchain_balance_sats:
            return False
        if self.total_anchor_channels_reserve_sats != other.total_anchor_channels_reserve_sats:
            return False
        if self.total_lightning_balance_sats != other.total_lightning_balance_sats:
            return False
        if self.outbound_capacity_lightning_sats != other.outbound_capacity_lightning_sats:
            return False
        if self.inbound_capacity_lightning_sats != other.inbound_capacity_lightning_sats:
            return False
        return True

class _UniffiConverterTypeBalances(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return Balances(
            total_onchain_balance_sats=_UniffiConverterUInt64.read(buf),
            spendable_onchain_balance_sats=_UniffiConverterUInt64.read(buf),
            total_anchor_channels_reserve_sats=_UniffiConverterUInt64.read(buf),
            total_lightning_balance_sats=_UniffiConverterUInt64.read(buf),
            outbound_capacity_lightning_sats=_UniffiConverterUInt64.read(buf),
            inbound_capacity_lightning_sats=_UniffiConverterUInt64.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiConverterUInt64.check_lower(value.total_onchain_balance_sats)
        _UniffiConverterUInt64.check_lower(value.spendable_onchain_balance_sats)
        _UniffiConverterUInt64.check_lower(value.total_anchor_channels_reserve_sats)
        _UniffiConverterUInt64.check_lower(value.total_lightning_balance_sats)
        _UniffiConverterUInt64.check_lower(value.outbound_capacity_lightning_sats)
        _UniffiConverterUInt64.check_lower(value.inbound_capacity_lightning_sats)

    @staticmethod
    def write(value, buf):
        _UniffiConverterUInt64.write(value.total_onchain_balance_sats, buf)
        _UniffiConverterUInt64.write(value.spendable_onchain_balance_sats, buf)
        _UniffiConverterUInt64.write(value.total_anchor_channels_reserve_sats, buf)
        _UniffiConverterUInt64.write(value.total_lightning_balance_sats, buf)
        _UniffiConverterUInt64.write(value.outbound_capacity_lightning_sats, buf)
        _UniffiConverterUInt64.write(value.inbound_capacity_lightning_sats, buf)


class LspFeeLimits:
    max_total_opening_fee_msat: "typing.Optional[int]"
    max_proportional_opening_fee_ppm_msat: "typing.Optional[int]"
    def __init__(self, *, max_total_opening_fee_msat: "typing.Optional[int]", max_proportional_opening_fee_ppm_msat: "typing.Optional[int]"):
        self.max_total_opening_fee_msat = max_total_opening_fee_msat
        self.max_proportional_opening_fee_ppm_msat = max_proportional_opening_fee_ppm_msat

    def __str__(self):
        return "LspFeeLimits(max_total_opening_fee_msat={}, max_proportional_opening_fee_ppm_msat={})".format(self.max_total_opening_fee_msat, self.max_proportional_opening_fee_ppm_msat)

    def __eq__(self, other):
        if self.max_total_opening_fee_msat != other.max_total_opening_fee_msat:
            return False
        if self.max_proportional_opening_fee_ppm_msat != other.max_proportional_opening_fee_ppm_msat:
            return False
        return True

class _UniffiConverterTypeLSPFeeLimits(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return LspFeeLimits(
            max_total_opening_fee_msat=_UniffiConverterOptionalUInt64.read(buf),
            max_proportional_opening_fee_ppm_msat=_UniffiConverterOptionalUInt64.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiConverterOptionalUInt64.check_lower(value.max_total_opening_fee_msat)
        _UniffiConverterOptionalUInt64.check_lower(value.max_proportional_opening_fee_ppm_msat)

    @staticmethod
    def write(value, buf):
        _UniffiConverterOptionalUInt64.write(value.max_total_opening_fee_msat, buf)
        _UniffiConverterOptionalUInt64.write(value.max_proportional_opening_fee_ppm_msat, buf)


class PaymentDetails:
    id: "PaymentId"
    kind: "PaymentKind"
    amount_msat: "typing.Optional[int]"
    direction: "PaymentDirection"
    status: "PaymentStatus"
    latest_update_timestamp: "int"
    def __init__(self, *, id: "PaymentId", kind: "PaymentKind", amount_msat: "typing.Optional[int]", direction: "PaymentDirection", status: "PaymentStatus", latest_update_timestamp: "int"):
        self.id = id
        self.kind = kind
        self.amount_msat = amount_msat
        self.direction = direction
        self.status = status
        self.latest_update_timestamp = latest_update_timestamp

    def __str__(self):
        return "PaymentDetails(id={}, kind={}, amount_msat={}, direction={}, status={}, latest_update_timestamp={})".format(self.id, self.kind, self.amount_msat, self.direction, self.status, self.latest_update_timestamp)

    def __eq__(self, other):
        if self.id != other.id:
            return False
        if self.kind != other.kind:
            return False
        if self.amount_msat != other.amount_msat:
            return False
        if self.direction != other.direction:
            return False
        if self.status != other.status:
            return False
        if self.latest_update_timestamp != other.latest_update_timestamp:
            return False
        return True

class _UniffiConverterTypePaymentDetails(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return PaymentDetails(
            id=_UniffiConverterTypePaymentId.read(buf),
            kind=_UniffiConverterTypePaymentKind.read(buf),
            amount_msat=_UniffiConverterOptionalUInt64.read(buf),
            direction=_UniffiConverterTypePaymentDirection.read(buf),
            status=_UniffiConverterTypePaymentStatus.read(buf),
            latest_update_timestamp=_UniffiConverterUInt64.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiConverterTypePaymentId.check_lower(value.id)
        _UniffiConverterTypePaymentKind.check_lower(value.kind)
        _UniffiConverterOptionalUInt64.check_lower(value.amount_msat)
        _UniffiConverterTypePaymentDirection.check_lower(value.direction)
        _UniffiConverterTypePaymentStatus.check_lower(value.status)
        _UniffiConverterUInt64.check_lower(value.latest_update_timestamp)

    @staticmethod
    def write(value, buf):
        _UniffiConverterTypePaymentId.write(value.id, buf)
        _UniffiConverterTypePaymentKind.write(value.kind, buf)
        _UniffiConverterOptionalUInt64.write(value.amount_msat, buf)
        _UniffiConverterTypePaymentDirection.write(value.direction, buf)
        _UniffiConverterTypePaymentStatus.write(value.status, buf)
        _UniffiConverterUInt64.write(value.latest_update_timestamp, buf)


class Status:
    node_id: "str"
    connected: "bool"
    usable_channels: "bool"
    best_block_height: "int"
    best_block_hash: "BlockHash"
    latest_wallet_sync_timestamp: "typing.Optional[int]"
    latest_onchain_wallet_sync_timestamp: "typing.Optional[int]"
    latest_fee_rate_cache_update_timestamp: "typing.Optional[int]"
    latest_rgs_snapshot_timestamp: "typing.Optional[int]"
    def __init__(self, *, node_id: "str", connected: "bool", usable_channels: "bool", best_block_height: "int", best_block_hash: "BlockHash", latest_wallet_sync_timestamp: "typing.Optional[int]", latest_onchain_wallet_sync_timestamp: "typing.Optional[int]", latest_fee_rate_cache_update_timestamp: "typing.Optional[int]", latest_rgs_snapshot_timestamp: "typing.Optional[int]"):
        self.node_id = node_id
        self.connected = connected
        self.usable_channels = usable_channels
        self.best_block_height = best_block_height
        self.best_block_hash = best_block_hash
        self.latest_wallet_sync_timestamp = latest_wallet_sync_timestamp
        self.latest_onchain_wallet_sync_timestamp = latest_onchain_wallet_sync_timestamp
        self.latest_fee_rate_cache_update_timestamp = latest_fee_rate_cache_update_timestamp
        self.latest_rgs_snapshot_timestamp = latest_rgs_snapshot_timestamp

    def __str__(self):
        return "Status(node_id={}, connected={}, usable_channels={}, best_block_height={}, best_block_hash={}, latest_wallet_sync_timestamp={}, latest_onchain_wallet_sync_timestamp={}, latest_fee_rate_cache_update_timestamp={}, latest_rgs_snapshot_timestamp={})".format(self.node_id, self.connected, self.usable_channels, self.best_block_height, self.best_block_hash, self.latest_wallet_sync_timestamp, self.latest_onchain_wallet_sync_timestamp, self.latest_fee_rate_cache_update_timestamp, self.latest_rgs_snapshot_timestamp)

    def __eq__(self, other):
        if self.node_id != other.node_id:
            return False
        if self.connected != other.connected:
            return False
        if self.usable_channels != other.usable_channels:
            return False
        if self.best_block_height != other.best_block_height:
            return False
        if self.best_block_hash != other.best_block_hash:
            return False
        if self.latest_wallet_sync_timestamp != other.latest_wallet_sync_timestamp:
            return False
        if self.latest_onchain_wallet_sync_timestamp != other.latest_onchain_wallet_sync_timestamp:
            return False
        if self.latest_fee_rate_cache_update_timestamp != other.latest_fee_rate_cache_update_timestamp:
            return False
        if self.latest_rgs_snapshot_timestamp != other.latest_rgs_snapshot_timestamp:
            return False
        return True

class _UniffiConverterTypeStatus(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return Status(
            node_id=_UniffiConverterString.read(buf),
            connected=_UniffiConverterBool.read(buf),
            usable_channels=_UniffiConverterBool.read(buf),
            best_block_height=_UniffiConverterUInt32.read(buf),
            best_block_hash=_UniffiConverterTypeBlockHash.read(buf),
            latest_wallet_sync_timestamp=_UniffiConverterOptionalUInt64.read(buf),
            latest_onchain_wallet_sync_timestamp=_UniffiConverterOptionalUInt64.read(buf),
            latest_fee_rate_cache_update_timestamp=_UniffiConverterOptionalUInt64.read(buf),
            latest_rgs_snapshot_timestamp=_UniffiConverterOptionalUInt64.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiConverterString.check_lower(value.node_id)
        _UniffiConverterBool.check_lower(value.connected)
        _UniffiConverterBool.check_lower(value.usable_channels)
        _UniffiConverterUInt32.check_lower(value.best_block_height)
        _UniffiConverterTypeBlockHash.check_lower(value.best_block_hash)
        _UniffiConverterOptionalUInt64.check_lower(value.latest_wallet_sync_timestamp)
        _UniffiConverterOptionalUInt64.check_lower(value.latest_onchain_wallet_sync_timestamp)
        _UniffiConverterOptionalUInt64.check_lower(value.latest_fee_rate_cache_update_timestamp)
        _UniffiConverterOptionalUInt64.check_lower(value.latest_rgs_snapshot_timestamp)

    @staticmethod
    def write(value, buf):
        _UniffiConverterString.write(value.node_id, buf)
        _UniffiConverterBool.write(value.connected, buf)
        _UniffiConverterBool.write(value.usable_channels, buf)
        _UniffiConverterUInt32.write(value.best_block_height, buf)
        _UniffiConverterTypeBlockHash.write(value.best_block_hash, buf)
        _UniffiConverterOptionalUInt64.write(value.latest_wallet_sync_timestamp, buf)
        _UniffiConverterOptionalUInt64.write(value.latest_onchain_wallet_sync_timestamp, buf)
        _UniffiConverterOptionalUInt64.write(value.latest_fee_rate_cache_update_timestamp, buf)
        _UniffiConverterOptionalUInt64.write(value.latest_rgs_snapshot_timestamp, buf)





class Network(enum.Enum):
    BITCOIN = 0
    
    TESTNET = 1
    
    SIGNET = 2
    
    REGTEST = 3
    


class _UniffiConverterTypeNetwork(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.read_i32()
        if variant == 1:
            return Network.BITCOIN
        if variant == 2:
            return Network.TESTNET
        if variant == 3:
            return Network.SIGNET
        if variant == 4:
            return Network.REGTEST
        raise InternalError("Raw enum value doesn't match any cases")

    @staticmethod
    def check_lower(value):
        if value == Network.BITCOIN:
            return
        if value == Network.TESTNET:
            return
        if value == Network.SIGNET:
            return
        if value == Network.REGTEST:
            return
        raise ValueError(value)

    @staticmethod
    def write(value, buf):
        if value == Network.BITCOIN:
            buf.write_i32(1)
        if value == Network.TESTNET:
            buf.write_i32(2)
        if value == Network.SIGNET:
            buf.write_i32(3)
        if value == Network.REGTEST:
            buf.write_i32(4)






class PaymentDirection(enum.Enum):
    INBOUND = 0
    
    OUTBOUND = 1
    


class _UniffiConverterTypePaymentDirection(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.read_i32()
        if variant == 1:
            return PaymentDirection.INBOUND
        if variant == 2:
            return PaymentDirection.OUTBOUND
        raise InternalError("Raw enum value doesn't match any cases")

    @staticmethod
    def check_lower(value):
        if value == PaymentDirection.INBOUND:
            return
        if value == PaymentDirection.OUTBOUND:
            return
        raise ValueError(value)

    @staticmethod
    def write(value, buf):
        if value == PaymentDirection.INBOUND:
            buf.write_i32(1)
        if value == PaymentDirection.OUTBOUND:
            buf.write_i32(2)






class PaymentKind:
    def __init__(self):
        raise RuntimeError("PaymentKind cannot be instantiated directly")

    # Each enum variant is a nested class of the enum itself.
    class ONCHAIN:

        def __init__(self,):
            pass

        def __str__(self):
            return "PaymentKind.ONCHAIN()".format()

        def __eq__(self, other):
            if not other.is_onchain():
                return False
            return True
    
    class BOLT11:
        hash: "PaymentHash"
        preimage: "typing.Optional[PaymentPreimage]"
        secret: "typing.Optional[PaymentSecret]"

        def __init__(self,hash: "PaymentHash", preimage: "typing.Optional[PaymentPreimage]", secret: "typing.Optional[PaymentSecret]"):
            self.hash = hash
            self.preimage = preimage
            self.secret = secret

        def __str__(self):
            return "PaymentKind.BOLT11(hash={}, preimage={}, secret={})".format(self.hash, self.preimage, self.secret)

        def __eq__(self, other):
            if not other.is_bolt11():
                return False
            if self.hash != other.hash:
                return False
            if self.preimage != other.preimage:
                return False
            if self.secret != other.secret:
                return False
            return True
    
    class BOLT11_JIT:
        hash: "PaymentHash"
        preimage: "typing.Optional[PaymentPreimage]"
        secret: "typing.Optional[PaymentSecret]"
        lsp_fee_limits: "LspFeeLimits"

        def __init__(self,hash: "PaymentHash", preimage: "typing.Optional[PaymentPreimage]", secret: "typing.Optional[PaymentSecret]", lsp_fee_limits: "LspFeeLimits"):
            self.hash = hash
            self.preimage = preimage
            self.secret = secret
            self.lsp_fee_limits = lsp_fee_limits

        def __str__(self):
            return "PaymentKind.BOLT11_JIT(hash={}, preimage={}, secret={}, lsp_fee_limits={})".format(self.hash, self.preimage, self.secret, self.lsp_fee_limits)

        def __eq__(self, other):
            if not other.is_bolt11_jit():
                return False
            if self.hash != other.hash:
                return False
            if self.preimage != other.preimage:
                return False
            if self.secret != other.secret:
                return False
            if self.lsp_fee_limits != other.lsp_fee_limits:
                return False
            return True
    
    class BOLT12_OFFER:
        hash: "typing.Optional[PaymentHash]"
        preimage: "typing.Optional[PaymentPreimage]"
        secret: "typing.Optional[PaymentSecret]"
        offer_id: "OfferId"

        def __init__(self,hash: "typing.Optional[PaymentHash]", preimage: "typing.Optional[PaymentPreimage]", secret: "typing.Optional[PaymentSecret]", offer_id: "OfferId"):
            self.hash = hash
            self.preimage = preimage
            self.secret = secret
            self.offer_id = offer_id

        def __str__(self):
            return "PaymentKind.BOLT12_OFFER(hash={}, preimage={}, secret={}, offer_id={})".format(self.hash, self.preimage, self.secret, self.offer_id)

        def __eq__(self, other):
            if not other.is_bolt12_offer():
                return False
            if self.hash != other.hash:
                return False
            if self.preimage != other.preimage:
                return False
            if self.secret != other.secret:
                return False
            if self.offer_id != other.offer_id:
                return False
            return True
    
    class BOLT12_REFUND:
        hash: "typing.Optional[PaymentHash]"
        preimage: "typing.Optional[PaymentPreimage]"
        secret: "typing.Optional[PaymentSecret]"

        def __init__(self,hash: "typing.Optional[PaymentHash]", preimage: "typing.Optional[PaymentPreimage]", secret: "typing.Optional[PaymentSecret]"):
            self.hash = hash
            self.preimage = preimage
            self.secret = secret

        def __str__(self):
            return "PaymentKind.BOLT12_REFUND(hash={}, preimage={}, secret={})".format(self.hash, self.preimage, self.secret)

        def __eq__(self, other):
            if not other.is_bolt12_refund():
                return False
            if self.hash != other.hash:
                return False
            if self.preimage != other.preimage:
                return False
            if self.secret != other.secret:
                return False
            return True
    
    class SPONTANEOUS:
        hash: "PaymentHash"
        preimage: "typing.Optional[PaymentPreimage]"

        def __init__(self,hash: "PaymentHash", preimage: "typing.Optional[PaymentPreimage]"):
            self.hash = hash
            self.preimage = preimage

        def __str__(self):
            return "PaymentKind.SPONTANEOUS(hash={}, preimage={})".format(self.hash, self.preimage)

        def __eq__(self, other):
            if not other.is_spontaneous():
                return False
            if self.hash != other.hash:
                return False
            if self.preimage != other.preimage:
                return False
            return True
    
    

    # For each variant, we have an `is_NAME` method for easily checking
    # whether an instance is that variant.
    def is_onchain(self) -> bool:
        return isinstance(self, PaymentKind.ONCHAIN)
    def is_bolt11(self) -> bool:
        return isinstance(self, PaymentKind.BOLT11)
    def is_bolt11_jit(self) -> bool:
        return isinstance(self, PaymentKind.BOLT11_JIT)
    def is_bolt12_offer(self) -> bool:
        return isinstance(self, PaymentKind.BOLT12_OFFER)
    def is_bolt12_refund(self) -> bool:
        return isinstance(self, PaymentKind.BOLT12_REFUND)
    def is_spontaneous(self) -> bool:
        return isinstance(self, PaymentKind.SPONTANEOUS)
    

# Now, a little trick - we make each nested variant class be a subclass of the main
# enum class, so that method calls and instance checks etc will work intuitively.
# We might be able to do this a little more neatly with a metaclass, but this'll do.
PaymentKind.ONCHAIN = type("PaymentKind.ONCHAIN", (PaymentKind.ONCHAIN, PaymentKind,), {})  # type: ignore
PaymentKind.BOLT11 = type("PaymentKind.BOLT11", (PaymentKind.BOLT11, PaymentKind,), {})  # type: ignore
PaymentKind.BOLT11_JIT = type("PaymentKind.BOLT11_JIT", (PaymentKind.BOLT11_JIT, PaymentKind,), {})  # type: ignore
PaymentKind.BOLT12_OFFER = type("PaymentKind.BOLT12_OFFER", (PaymentKind.BOLT12_OFFER, PaymentKind,), {})  # type: ignore
PaymentKind.BOLT12_REFUND = type("PaymentKind.BOLT12_REFUND", (PaymentKind.BOLT12_REFUND, PaymentKind,), {})  # type: ignore
PaymentKind.SPONTANEOUS = type("PaymentKind.SPONTANEOUS", (PaymentKind.SPONTANEOUS, PaymentKind,), {})  # type: ignore




class _UniffiConverterTypePaymentKind(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.read_i32()
        if variant == 1:
            return PaymentKind.ONCHAIN(
            )
        if variant == 2:
            return PaymentKind.BOLT11(
                _UniffiConverterTypePaymentHash.read(buf),
                _UniffiConverterOptionalTypePaymentPreimage.read(buf),
                _UniffiConverterOptionalTypePaymentSecret.read(buf),
            )
        if variant == 3:
            return PaymentKind.BOLT11_JIT(
                _UniffiConverterTypePaymentHash.read(buf),
                _UniffiConverterOptionalTypePaymentPreimage.read(buf),
                _UniffiConverterOptionalTypePaymentSecret.read(buf),
                _UniffiConverterTypeLSPFeeLimits.read(buf),
            )
        if variant == 4:
            return PaymentKind.BOLT12_OFFER(
                _UniffiConverterOptionalTypePaymentHash.read(buf),
                _UniffiConverterOptionalTypePaymentPreimage.read(buf),
                _UniffiConverterOptionalTypePaymentSecret.read(buf),
                _UniffiConverterTypeOfferId.read(buf),
            )
        if variant == 5:
            return PaymentKind.BOLT12_REFUND(
                _UniffiConverterOptionalTypePaymentHash.read(buf),
                _UniffiConverterOptionalTypePaymentPreimage.read(buf),
                _UniffiConverterOptionalTypePaymentSecret.read(buf),
            )
        if variant == 6:
            return PaymentKind.SPONTANEOUS(
                _UniffiConverterTypePaymentHash.read(buf),
                _UniffiConverterOptionalTypePaymentPreimage.read(buf),
            )
        raise InternalError("Raw enum value doesn't match any cases")

    @staticmethod
    def check_lower(value):
        if value.is_onchain():
            return
        if value.is_bolt11():
            _UniffiConverterTypePaymentHash.check_lower(value.hash)
            _UniffiConverterOptionalTypePaymentPreimage.check_lower(value.preimage)
            _UniffiConverterOptionalTypePaymentSecret.check_lower(value.secret)
            return
        if value.is_bolt11_jit():
            _UniffiConverterTypePaymentHash.check_lower(value.hash)
            _UniffiConverterOptionalTypePaymentPreimage.check_lower(value.preimage)
            _UniffiConverterOptionalTypePaymentSecret.check_lower(value.secret)
            _UniffiConverterTypeLSPFeeLimits.check_lower(value.lsp_fee_limits)
            return
        if value.is_bolt12_offer():
            _UniffiConverterOptionalTypePaymentHash.check_lower(value.hash)
            _UniffiConverterOptionalTypePaymentPreimage.check_lower(value.preimage)
            _UniffiConverterOptionalTypePaymentSecret.check_lower(value.secret)
            _UniffiConverterTypeOfferId.check_lower(value.offer_id)
            return
        if value.is_bolt12_refund():
            _UniffiConverterOptionalTypePaymentHash.check_lower(value.hash)
            _UniffiConverterOptionalTypePaymentPreimage.check_lower(value.preimage)
            _UniffiConverterOptionalTypePaymentSecret.check_lower(value.secret)
            return
        if value.is_spontaneous():
            _UniffiConverterTypePaymentHash.check_lower(value.hash)
            _UniffiConverterOptionalTypePaymentPreimage.check_lower(value.preimage)
            return
        raise ValueError(value)

    @staticmethod
    def write(value, buf):
        if value.is_onchain():
            buf.write_i32(1)
        if value.is_bolt11():
            buf.write_i32(2)
            _UniffiConverterTypePaymentHash.write(value.hash, buf)
            _UniffiConverterOptionalTypePaymentPreimage.write(value.preimage, buf)
            _UniffiConverterOptionalTypePaymentSecret.write(value.secret, buf)
        if value.is_bolt11_jit():
            buf.write_i32(3)
            _UniffiConverterTypePaymentHash.write(value.hash, buf)
            _UniffiConverterOptionalTypePaymentPreimage.write(value.preimage, buf)
            _UniffiConverterOptionalTypePaymentSecret.write(value.secret, buf)
            _UniffiConverterTypeLSPFeeLimits.write(value.lsp_fee_limits, buf)
        if value.is_bolt12_offer():
            buf.write_i32(4)
            _UniffiConverterOptionalTypePaymentHash.write(value.hash, buf)
            _UniffiConverterOptionalTypePaymentPreimage.write(value.preimage, buf)
            _UniffiConverterOptionalTypePaymentSecret.write(value.secret, buf)
            _UniffiConverterTypeOfferId.write(value.offer_id, buf)
        if value.is_bolt12_refund():
            buf.write_i32(5)
            _UniffiConverterOptionalTypePaymentHash.write(value.hash, buf)
            _UniffiConverterOptionalTypePaymentPreimage.write(value.preimage, buf)
            _UniffiConverterOptionalTypePaymentSecret.write(value.secret, buf)
        if value.is_spontaneous():
            buf.write_i32(6)
            _UniffiConverterTypePaymentHash.write(value.hash, buf)
            _UniffiConverterOptionalTypePaymentPreimage.write(value.preimage, buf)






class PaymentStatus(enum.Enum):
    PENDING = 0
    
    SUCCEEDED = 1
    
    FAILED = 2
    


class _UniffiConverterTypePaymentStatus(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.read_i32()
        if variant == 1:
            return PaymentStatus.PENDING
        if variant == 2:
            return PaymentStatus.SUCCEEDED
        if variant == 3:
            return PaymentStatus.FAILED
        raise InternalError("Raw enum value doesn't match any cases")

    @staticmethod
    def check_lower(value):
        if value == PaymentStatus.PENDING:
            return
        if value == PaymentStatus.SUCCEEDED:
            return
        if value == PaymentStatus.FAILED:
            return
        raise ValueError(value)

    @staticmethod
    def write(value, buf):
        if value == PaymentStatus.PENDING:
            buf.write_i32(1)
        if value == PaymentStatus.SUCCEEDED:
            buf.write_i32(2)
        if value == PaymentStatus.FAILED:
            buf.write_i32(3)



# RomerError
# We want to define each variant as a nested class that's also a subclass,
# which is tricky in Python.  To accomplish this we're going to create each
# class separately, then manually add the child classes to the base class's
# __dict__.  All of this happens in dummy class to avoid polluting the module
# namespace.
class RomerError(Exception):
    pass

_UniffiTempRomerError = RomerError

class RomerError:  # type: ignore
    class InvalidApiToken(_UniffiTempRomerError):

        def __repr__(self):
            return "RomerError.InvalidApiToken({})".format(repr(str(self)))
    _UniffiTempRomerError.InvalidApiToken = InvalidApiToken # type: ignore
    class NetworkNotSupported(_UniffiTempRomerError):

        def __repr__(self):
            return "RomerError.NetworkNotSupported({})".format(repr(str(self)))
    _UniffiTempRomerError.NetworkNotSupported = NetworkNotSupported # type: ignore
    class InvalidBolt11Invoice(_UniffiTempRomerError):

        def __repr__(self):
            return "RomerError.InvalidBolt11Invoice({})".format(repr(str(self)))
    _UniffiTempRomerError.InvalidBolt11Invoice = InvalidBolt11Invoice # type: ignore
    class InvalidBitcoinAddress(_UniffiTempRomerError):

        def __repr__(self):
            return "RomerError.InvalidBitcoinAddress({})".format(repr(str(self)))
    _UniffiTempRomerError.InvalidBitcoinAddress = InvalidBitcoinAddress # type: ignore
    class InvalidOfferId(_UniffiTempRomerError):

        def __repr__(self):
            return "RomerError.InvalidOfferId({})".format(repr(str(self)))
    _UniffiTempRomerError.InvalidOfferId = InvalidOfferId # type: ignore
    class InvalidPaymentId(_UniffiTempRomerError):

        def __repr__(self):
            return "RomerError.InvalidPaymentId({})".format(repr(str(self)))
    _UniffiTempRomerError.InvalidPaymentId = InvalidPaymentId # type: ignore
    class InvalidPaymentHash(_UniffiTempRomerError):

        def __repr__(self):
            return "RomerError.InvalidPaymentHash({})".format(repr(str(self)))
    _UniffiTempRomerError.InvalidPaymentHash = InvalidPaymentHash # type: ignore
    class InvalidPaymentPreimage(_UniffiTempRomerError):

        def __repr__(self):
            return "RomerError.InvalidPaymentPreimage({})".format(repr(str(self)))
    _UniffiTempRomerError.InvalidPaymentPreimage = InvalidPaymentPreimage # type: ignore
    class InvalidPaymentSecret(_UniffiTempRomerError):

        def __repr__(self):
            return "RomerError.InvalidPaymentSecret({})".format(repr(str(self)))
    _UniffiTempRomerError.InvalidPaymentSecret = InvalidPaymentSecret # type: ignore
    class FailedToBuildNode(_UniffiTempRomerError):

        def __repr__(self):
            return "RomerError.FailedToBuildNode({})".format(repr(str(self)))
    _UniffiTempRomerError.FailedToBuildNode = FailedToBuildNode # type: ignore
    class LdkNodeError(_UniffiTempRomerError):

        def __repr__(self):
            return "RomerError.LdkNodeError({})".format(repr(str(self)))
    _UniffiTempRomerError.LdkNodeError = LdkNodeError # type: ignore
    class RecipientRejected(_UniffiTempRomerError):

        def __repr__(self):
            return "RomerError.RecipientRejected({})".format(repr(str(self)))
    _UniffiTempRomerError.RecipientRejected = RecipientRejected # type: ignore
    class RetriesExhausted(_UniffiTempRomerError):

        def __repr__(self):
            return "RomerError.RetriesExhausted({})".format(repr(str(self)))
    _UniffiTempRomerError.RetriesExhausted = RetriesExhausted # type: ignore
    class PaymentExpired(_UniffiTempRomerError):

        def __repr__(self):
            return "RomerError.PaymentExpired({})".format(repr(str(self)))
    _UniffiTempRomerError.PaymentExpired = PaymentExpired # type: ignore
    class RouteNotFound(_UniffiTempRomerError):

        def __repr__(self):
            return "RomerError.RouteNotFound({})".format(repr(str(self)))
    _UniffiTempRomerError.RouteNotFound = RouteNotFound # type: ignore
    class UnexpectedError(_UniffiTempRomerError):

        def __repr__(self):
            return "RomerError.UnexpectedError({})".format(repr(str(self)))
    _UniffiTempRomerError.UnexpectedError = UnexpectedError # type: ignore

RomerError = _UniffiTempRomerError # type: ignore
del _UniffiTempRomerError


class _UniffiConverterTypeRomerError(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.read_i32()
        if variant == 1:
            return RomerError.InvalidApiToken(
                _UniffiConverterString.read(buf),
            )
        if variant == 2:
            return RomerError.NetworkNotSupported(
                _UniffiConverterString.read(buf),
            )
        if variant == 3:
            return RomerError.InvalidBolt11Invoice(
                _UniffiConverterString.read(buf),
            )
        if variant == 4:
            return RomerError.InvalidBitcoinAddress(
                _UniffiConverterString.read(buf),
            )
        if variant == 5:
            return RomerError.InvalidOfferId(
                _UniffiConverterString.read(buf),
            )
        if variant == 6:
            return RomerError.InvalidPaymentId(
                _UniffiConverterString.read(buf),
            )
        if variant == 7:
            return RomerError.InvalidPaymentHash(
                _UniffiConverterString.read(buf),
            )
        if variant == 8:
            return RomerError.InvalidPaymentPreimage(
                _UniffiConverterString.read(buf),
            )
        if variant == 9:
            return RomerError.InvalidPaymentSecret(
                _UniffiConverterString.read(buf),
            )
        if variant == 10:
            return RomerError.FailedToBuildNode(
                _UniffiConverterString.read(buf),
            )
        if variant == 11:
            return RomerError.LdkNodeError(
                _UniffiConverterString.read(buf),
            )
        if variant == 12:
            return RomerError.RecipientRejected(
                _UniffiConverterString.read(buf),
            )
        if variant == 13:
            return RomerError.RetriesExhausted(
                _UniffiConverterString.read(buf),
            )
        if variant == 14:
            return RomerError.PaymentExpired(
                _UniffiConverterString.read(buf),
            )
        if variant == 15:
            return RomerError.RouteNotFound(
                _UniffiConverterString.read(buf),
            )
        if variant == 16:
            return RomerError.UnexpectedError(
                _UniffiConverterString.read(buf),
            )
        raise InternalError("Raw enum value doesn't match any cases")

    @staticmethod
    def check_lower(value):
        if isinstance(value, RomerError.InvalidApiToken):
            return
        if isinstance(value, RomerError.NetworkNotSupported):
            return
        if isinstance(value, RomerError.InvalidBolt11Invoice):
            return
        if isinstance(value, RomerError.InvalidBitcoinAddress):
            return
        if isinstance(value, RomerError.InvalidOfferId):
            return
        if isinstance(value, RomerError.InvalidPaymentId):
            return
        if isinstance(value, RomerError.InvalidPaymentHash):
            return
        if isinstance(value, RomerError.InvalidPaymentPreimage):
            return
        if isinstance(value, RomerError.InvalidPaymentSecret):
            return
        if isinstance(value, RomerError.FailedToBuildNode):
            return
        if isinstance(value, RomerError.LdkNodeError):
            return
        if isinstance(value, RomerError.RecipientRejected):
            return
        if isinstance(value, RomerError.RetriesExhausted):
            return
        if isinstance(value, RomerError.PaymentExpired):
            return
        if isinstance(value, RomerError.RouteNotFound):
            return
        if isinstance(value, RomerError.UnexpectedError):
            return

    @staticmethod
    def write(value, buf):
        if isinstance(value, RomerError.InvalidApiToken):
            buf.write_i32(1)
        if isinstance(value, RomerError.NetworkNotSupported):
            buf.write_i32(2)
        if isinstance(value, RomerError.InvalidBolt11Invoice):
            buf.write_i32(3)
        if isinstance(value, RomerError.InvalidBitcoinAddress):
            buf.write_i32(4)
        if isinstance(value, RomerError.InvalidOfferId):
            buf.write_i32(5)
        if isinstance(value, RomerError.InvalidPaymentId):
            buf.write_i32(6)
        if isinstance(value, RomerError.InvalidPaymentHash):
            buf.write_i32(7)
        if isinstance(value, RomerError.InvalidPaymentPreimage):
            buf.write_i32(8)
        if isinstance(value, RomerError.InvalidPaymentSecret):
            buf.write_i32(9)
        if isinstance(value, RomerError.FailedToBuildNode):
            buf.write_i32(10)
        if isinstance(value, RomerError.LdkNodeError):
            buf.write_i32(11)
        if isinstance(value, RomerError.RecipientRejected):
            buf.write_i32(12)
        if isinstance(value, RomerError.RetriesExhausted):
            buf.write_i32(13)
        if isinstance(value, RomerError.PaymentExpired):
            buf.write_i32(14)
        if isinstance(value, RomerError.RouteNotFound):
            buf.write_i32(15)
        if isinstance(value, RomerError.UnexpectedError):
            buf.write_i32(16)



class _UniffiConverterOptionalUInt64(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        if value is not None:
            _UniffiConverterUInt64.check_lower(value)

    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterUInt64.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterUInt64.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterOptionalTypePaymentHash(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        if value is not None:
            _UniffiConverterTypePaymentHash.check_lower(value)

    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterTypePaymentHash.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterTypePaymentHash.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterOptionalTypePaymentPreimage(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        if value is not None:
            _UniffiConverterTypePaymentPreimage.check_lower(value)

    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterTypePaymentPreimage.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterTypePaymentPreimage.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterOptionalTypePaymentSecret(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        if value is not None:
            _UniffiConverterTypePaymentSecret.check_lower(value)

    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterTypePaymentSecret.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterTypePaymentSecret.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterSequenceTypePaymentDetails(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        for item in value:
            _UniffiConverterTypePaymentDetails.check_lower(item)

    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.write_i32(items)
        for item in value:
            _UniffiConverterTypePaymentDetails.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.read_i32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [
            _UniffiConverterTypePaymentDetails.read(buf) for i in range(count)
        ]


class _UniffiConverterTypeAddress:
    @staticmethod
    def write(value, buf):
        _UniffiConverterString.write(value, buf)

    @staticmethod
    def read(buf):
        return _UniffiConverterString.read(buf)

    @staticmethod
    def lift(value):
        return _UniffiConverterString.lift(value)

    @staticmethod
    def check_lower(value):
        return _UniffiConverterString.check_lower(value)

    @staticmethod
    def lower(value):
        return _UniffiConverterString.lower(value)


class _UniffiConverterTypeBlockHash:
    @staticmethod
    def write(value, buf):
        _UniffiConverterString.write(value, buf)

    @staticmethod
    def read(buf):
        return _UniffiConverterString.read(buf)

    @staticmethod
    def lift(value):
        return _UniffiConverterString.lift(value)

    @staticmethod
    def check_lower(value):
        return _UniffiConverterString.check_lower(value)

    @staticmethod
    def lower(value):
        return _UniffiConverterString.lower(value)


class _UniffiConverterTypeBolt11Invoice:
    @staticmethod
    def write(value, buf):
        _UniffiConverterString.write(value, buf)

    @staticmethod
    def read(buf):
        return _UniffiConverterString.read(buf)

    @staticmethod
    def lift(value):
        return _UniffiConverterString.lift(value)

    @staticmethod
    def check_lower(value):
        return _UniffiConverterString.check_lower(value)

    @staticmethod
    def lower(value):
        return _UniffiConverterString.lower(value)


class _UniffiConverterTypeOfferId:
    @staticmethod
    def write(value, buf):
        _UniffiConverterString.write(value, buf)

    @staticmethod
    def read(buf):
        return _UniffiConverterString.read(buf)

    @staticmethod
    def lift(value):
        return _UniffiConverterString.lift(value)

    @staticmethod
    def check_lower(value):
        return _UniffiConverterString.check_lower(value)

    @staticmethod
    def lower(value):
        return _UniffiConverterString.lower(value)


class _UniffiConverterTypePaymentHash:
    @staticmethod
    def write(value, buf):
        _UniffiConverterString.write(value, buf)

    @staticmethod
    def read(buf):
        return _UniffiConverterString.read(buf)

    @staticmethod
    def lift(value):
        return _UniffiConverterString.lift(value)

    @staticmethod
    def check_lower(value):
        return _UniffiConverterString.check_lower(value)

    @staticmethod
    def lower(value):
        return _UniffiConverterString.lower(value)


class _UniffiConverterTypePaymentId:
    @staticmethod
    def write(value, buf):
        _UniffiConverterString.write(value, buf)

    @staticmethod
    def read(buf):
        return _UniffiConverterString.read(buf)

    @staticmethod
    def lift(value):
        return _UniffiConverterString.lift(value)

    @staticmethod
    def check_lower(value):
        return _UniffiConverterString.check_lower(value)

    @staticmethod
    def lower(value):
        return _UniffiConverterString.lower(value)


class _UniffiConverterTypePaymentPreimage:
    @staticmethod
    def write(value, buf):
        _UniffiConverterString.write(value, buf)

    @staticmethod
    def read(buf):
        return _UniffiConverterString.read(buf)

    @staticmethod
    def lift(value):
        return _UniffiConverterString.lift(value)

    @staticmethod
    def check_lower(value):
        return _UniffiConverterString.check_lower(value)

    @staticmethod
    def lower(value):
        return _UniffiConverterString.lower(value)


class _UniffiConverterTypePaymentSecret:
    @staticmethod
    def write(value, buf):
        _UniffiConverterString.write(value, buf)

    @staticmethod
    def read(buf):
        return _UniffiConverterString.read(buf)

    @staticmethod
    def lift(value):
        return _UniffiConverterString.lift(value)

    @staticmethod
    def check_lower(value):
        return _UniffiConverterString.check_lower(value)

    @staticmethod
    def lower(value):
        return _UniffiConverterString.lower(value)


class _UniffiConverterTypeTxid:
    @staticmethod
    def write(value, buf):
        _UniffiConverterString.write(value, buf)

    @staticmethod
    def read(buf):
        return _UniffiConverterString.read(buf)

    @staticmethod
    def lift(value):
        return _UniffiConverterString.lift(value)

    @staticmethod
    def check_lower(value):
        return _UniffiConverterString.check_lower(value)

    @staticmethod
    def lower(value):
        return _UniffiConverterString.lower(value)
Address = str
BlockHash = str
Bolt11Invoice = str
OfferId = str
PaymentHash = str
PaymentId = str
PaymentPreimage = str
PaymentSecret = str
Txid = str

# Async support

__all__ = [
    "InternalError",
    "Network",
    "PaymentDirection",
    "PaymentKind",
    "PaymentStatus",
    "RomerError",
    "Balances",
    "LspFeeLimits",
    "PaymentDetails",
    "Status",
    "Romer",
]

